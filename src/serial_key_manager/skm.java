/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package serial_key_manager;

import ibxm.IBXM;
import ibxm.Module;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.SourceDataLine;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import window32.Window32;

/**
 *
 * @author stark
 */
public class skm extends javax.swing.JFrame {

    private Window32 window32 = Window32.getInstence();
    private FileArrayProvider fileArrayProvider = FileArrayProvider.getInstence();
    private String filed1, filed2, filed3, filed4, filed5;
    private Point startDrag = null;
    private Point curLocation = null;
    private boolean AUTO_TYPE = true;
    private static final int SAMPLE_RATE = 48000;
    private Module module;
    private IBXM ibxm;
    private volatile boolean playing;
    private Thread playThread;
    String msg = " *     gREEts from                                            stark9000 !                                                 *";

    /**
     * Creates new form skm
     */
    public skm() {
        initComponents();
        pAloader();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        Play = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("serial key manager test , beta.");
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("generate !");
        jButton1.setPreferredSize(new java.awt.Dimension(83, 22));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 37, -1, -1));

        jButton2.setText("exit");
        jButton2.setPreferredSize(new java.awt.Dimension(51, 22));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 166, -1, -1));

        jLabel1.setText(":: stark9000 ::");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 90, -1));

        jCheckBox1.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("auto type");
        jCheckBox1.setOpaque(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        Play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/serial_key_manager/music_play.png"))); // NOI18N
        Play.setContentAreaFilled(false);
        Play.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });
        getContentPane().add(Play, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 30, 30));

        jTextField1.setEditable(false);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 160, -1));

        jButton4.setText("copy");
        jButton4.setPreferredSize(new java.awt.Dimension(55, 22));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 37, -1, -1));

        jLabel5.setText("|");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, 80, -1));

        jLabel3.setText("|");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 197, 240, 20));

        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText(" ~stark9000~");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/serial_key_manager/0.png"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 420, 190));

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-420)/2, (screenSize.height-221)/2, 420, 221);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if (fileArrayProvider.readLines("serials.keys").length == 0) {
                jLabel1.setText("no keys !");
            } else {
                String serialkey = getSerialKey();
                jTextField1.setText(serialkey);
                filed1 = serialkey.split("-")[0].trim();
                filed2 = serialkey.split("-")[1].trim();
                filed3 = serialkey.split("-")[2].trim();
                filed4 = serialkey.split("-")[3].trim();
                filed5 = serialkey.split("-")[4].trim();
            }

        } catch (IOException ex) {
            jLabel5.setText("no keys !");
        }

        if (AUTO_TYPE) {

            if (setSerialKey("#32770", "Need for Speedâ„¢ Most Wanted")) {
                jLabel5.setText(":)");
            } else {

                if (setSerialKey("#32770", "Need for Speed Most Wanted")) {
                    jLabel5.setText(":)");
                }
                jLabel5.setText(":(");
            }
        } else {
            jLabel5.setText("");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setClipboard(jTextField1.getText());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            AUTO_TYPE = true;
        } else {
            AUTO_TYPE = false;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
        if (playing) {
            stop();
        } else {
            play();
        }

    }//GEN-LAST:event_PlayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(skm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(skm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(skm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(skm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new skm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Play;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private boolean setSerialKey(String cName, String wName) {
        try {
            int hMainWnd = window32.FindWindow(cName, wName);
            if (hMainWnd == 0) {
                return false;
            } else {
                int Edit1 = window32.FindWindowEx(hMainWnd, 0, "Edit", "");
                int Edit2 = window32.FindWindowEx(hMainWnd, Edit1, "Edit", "");
                int Edit3 = window32.FindWindowEx(hMainWnd, Edit2, "Edit", "");
                int Edit4 = window32.FindWindowEx(hMainWnd, Edit3, "Edit", "");
                int Edit5 = window32.FindWindowEx(hMainWnd, Edit4, "Edit", "");

                int hwnd1 = Edit1;
                int hwnd2 = Edit2;
                int hwnd3 = Edit3;
                int hwnd4 = Edit4;
                int hwnd5 = Edit5;

                window32.SendMessage(hwnd1, 0, 0, filed1);
                window32.SendMessage(hwnd2, 0, 0, filed2);
                window32.SendMessage(hwnd3, 0, 0, filed3);
                window32.SendMessage(hwnd4, 0, 0, filed4);
                window32.SendMessage(hwnd5, 0, 0, filed5);
            }
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    public String getSerialKey() {
        Random random = null;
        int randomNumber = 0;
        List<String> strings = null;
        try {
            int keysLength = fileArrayProvider.readLines("serials.keys").length;
            random = new Random();
            randomNumber = random.nextInt(keysLength);
            strings = Arrays.asList(fileArrayProvider.readLines("serials.keys"));
        } catch (Exception e) {
        }
        return strings.get(randomNumber);
    }

    private void CaptureMove() {
        jLabel2.addMouseMotionListener(new MouseMotionAdapter() {

            @Override
            public void mouseDragged(MouseEvent event) {
                try {
                    Point curDrag = event.getPoint();

                    if (startDrag == null) {
                        startDrag = curDrag;
                    }
                    curLocation = curDrag;

                    Point location = getLocation();
                    setLocation(
                            location.x + (curLocation.x - startDrag.x),
                            location.y + (curLocation.y - startDrag.y));
                } catch (Exception e) {
                }
            }
        });
        jLabel2.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseReleased(MouseEvent event) {
                try {
                    Point location = getLocation();
                    setLocation(
                            location.x + (curLocation.x - startDrag.x),
                            location.y + (curLocation.y - startDrag.y));
                    startDrag = null;
                } catch (Exception e) {
                }
            }
        });

    }

    private boolean pAloader() {
        try {
            SwingUtilities.invokeLater(new Runnable() {

                @SuppressWarnings("static-access")
                public void run() {
                    setIcon();
                    CaptureMove();
                    LoadMoDFile();
                    SlideText();
                }
            });
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    public static String getClipboard() {
        Transferable t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);

        try {
            if (t != null && t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                String text = (String) t.getTransferData(DataFlavor.stringFlavor);
                return text;
            }
        } catch (UnsupportedFlavorException e) {
        } catch (IOException e) {
        }
        return null;
    }

    public static void setClipboard(String str) {
        StringSelection ss = new StringSelection(str);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
    }

    public void SlideText() {

        Timer timer = new Timer(20, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                char c = msg.charAt(0);
                String rest = msg.substring(1);
                msg = rest + c;
                jLabel3.setText(msg);
            }
        });
        timer.start();
        timer.setDelay(200);
    }

    public void LoadMoDFile() {
        String path = System.getProperty("user.dir") + System.getProperty("file.separator") + "cptun.xmfile";
        File ff = new File(path);
        try {
            loadModule(ff);
        } catch (IOException ex) {
            System.out.println("" + ex);
        }
    }

    private synchronized void loadModule(File modFile) throws IOException {
        byte[] moduleData = new byte[(int) modFile.length()];
        FileInputStream inputStream = new FileInputStream(modFile);
        int offset = 0;
        while (offset < moduleData.length) {
            int len = inputStream.read(moduleData, offset, moduleData.length - offset);
            if (len < 0) {
                throw new IOException("Unexpected end of file.");
            }
            offset += len;
        }
        inputStream.close();
        module = new Module(moduleData);
        ibxm = new IBXM(module, SAMPLE_RATE);
    }

    private synchronized int getAudio(int[] mixBuf) {
        int count = ibxm.getAudio(mixBuf);
        return count;
    }

    private synchronized void play() {
        if (ibxm != null) {
            playing = true;
            playThread = new Thread(new Runnable() {

                @Override
                public void run() {
                    int[] mixBuf = new int[ibxm.getMixBufferLength()];
                    byte[] outBuf = new byte[mixBuf.length * 4];
                    AudioFormat audioFormat = null;
                    SourceDataLine audioLine = null;
                    try {
                        audioFormat = new AudioFormat(SAMPLE_RATE, 16, 2, true, true);
                        audioLine = AudioSystem.getSourceDataLine(audioFormat);
                        audioLine.open();
                        audioLine.start();
                        while (playing) {
                            int count = getAudio(mixBuf);
                            int outIdx = 0;
                            for (int mixIdx = 0, mixEnd = count * 2; mixIdx < mixEnd; mixIdx++) {
                                int ampl = mixBuf[mixIdx];
                                if (ampl > 32767) {
                                    ampl = 32767;
                                }
                                if (ampl < -32768) {
                                    ampl = -32768;
                                }
                                outBuf[outIdx++] = (byte) (ampl >> 8);
                                outBuf[outIdx++] = (byte) ampl;
                            }
                            audioLine.write(outBuf, 0, outIdx);
                        }
                        audioLine.drain();
                    } catch (Exception e) {
                    } finally {
                        if (audioLine != null && audioLine.isOpen()) {
                            audioLine.close();
                        }
                    }
                }
            });
            playThread.start();
        }
    }

    private synchronized void stop() {
        playing = false;
        try {
            if (playThread != null) {
                playThread.join();
            }
        } catch (InterruptedException e) {
        }
    }

    private void setIcon() {
        ImageIcon icon = new ImageIcon(getClass().getResource("Need for Speed Most Wanted ico.png"));
        Image Image = icon.getImage();
        this.setIconImage(Image);
    }
}
